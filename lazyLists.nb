Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$HistoryLength", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<lazyLists`\>\"", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[649]:=",ExpressionUUID->"2d6a87cf-3ef1-4832-b8b9-0995d6d1b646"],

Cell[CellGroupData[{

Cell["Usage messages for lazy list constructors and other symbols", \
"Section",ExpressionUUID->"ec4cc4aa-b2ff-4f5e-9ddc-c3f207f96586"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPowerRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyNestList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyStream"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyConstantArray"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyMapThread"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTranspose"}]}], "Input",
 CellLabel->
  "In[652]:=",ExpressionUUID->"8f1d3194-9e73-46ae-83d7-5e7cad595285"],

Cell[CellGroupData[{

Cell[BoxData["\<\"lazyList is linked list data structure that should contain \
2 elements: the first is the first element, the second a held expression that \
will generate the next linked list when evaluated.\\nYou can extract these \
elements explicitely with First and Last/Rest. Part and Take will not work \
because they have been overloaded with special functionalities when used on \
lazyList.\\nlazyList[list] or lazyList[Hold[var]] is a special constructor \
that generates a lazyList from an ordinary list\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6523746363246-7685334",ExpressionUUID->"75b0683f-716d-41d7-ace5-\
41bb815ea044"],

Cell[BoxData["\<\"lazyRange[] is a lazy representation of the Integers from 1 \
to \[Infinity]. lazyRange[min, delta] represents values values from min \
onwards in steps of delta. lazyRange has no upper limit\"\>"], "Print", \
"PrintUsage",
 CellTags->
  "Info6533746363246-7685334",ExpressionUUID->"247f1546-70c4-4b34-abad-\
9724f77742f2"],

Cell[BoxData["\<\"lazyPowerRange[min, r] is the infinite list {min, r \
\[Times] min, r^2 \[Times] min, ...}\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6543746363246-7685334",ExpressionUUID->"fae14dfd-444f-4a7d-97fc-\
62e7b940c593"],

Cell[BoxData["\<\"lazyNestList[f, elem] is the infinite list {elem, f[elem], \
f[f[elem]], ...} starting with elem and generated by iterating f repeatedly\"\
\>"], "Print", "PrintUsage",
 CellTags->
  "Info6553746363247-7685334",ExpressionUUID->"d846bf22-18b6-4544-9939-\
7535da11d7da"],

Cell[BoxData["\<\"lazyStream[streamObject] creates a lazyList that streams \
from streamObject. These streams will stop automatically when EndOfFile is \
reached\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6563746363247-7685334",ExpressionUUID->"3e5b96b5-5373-4e3b-acef-\
fc51da004fa7"],

Cell[BoxData["\<\"lazyConstantArray[elem] produces an infinite list of copies \
of elem\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6573746363247-7685334",ExpressionUUID->"9a35b541-c36e-4c05-a717-\
ce3691a18f87"],

Cell[BoxData["\<\"lazyMapThread[f, {lz1, lz2, ...}] is similar to MapThread, \
except all elements from the lazyLists are fed to the first slot of f as a \
regular List\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6583746363247-7685334",ExpressionUUID->"66eb89f1-6636-44d0-88bc-\
ab85c3deb7c6"],

Cell[BoxData["\<\"lazyTranspose[{lz1, lz2, ...}] creates a lazyList with \
tuples of elements from lz1, lz2, etc. \\nEquivalent to \
lazyMapThread[Identity, {lz1, lz2, ...}]\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6593746363247-7685334",ExpressionUUID->"5fd7e880-944e-44eb-a531-\
3404645b4933"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", 
  "$lazyIterationLimit"}], "\[IndentingNewLine]", "$lazyIterationLimit"}], \
"Input",
 CellLabel->
  "In[660]:=",ExpressionUUID->"d8833260-c2e5-4791-808b-7f6f92e54cfe"],

Cell[BoxData["\<\"Iteration limit used for finding successive elements in a \
lazy list\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info6603746363247-7685334",ExpressionUUID->"25fe47b6-21d4-4d44-a261-\
7b0906578358"],

Cell[BoxData["\[Infinity]"], "Output",
 CellLabel->"Out[661]=",ExpressionUUID->"bc30e967-fad1-4105-b2ea-33fcfbb27514"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage examples", \
"Section",ExpressionUUID->"79b459a2-40b2-4d85-ad2a-91269059057f"],

Cell[CellGroupData[{

Cell["Creating lazyLists and extracting elements from them", \
"Subsection",ExpressionUUID->"9cdf5a73-58b8-496b-a090-8a5dfff3450d"],

Cell["\<\
Take and Part will continuously evaluate the next element of lazy list until \
the required elements have been found. \
\>", "Text",ExpressionUUID->"c60618e2-1470-4fc2-98cd-8097bfc68e7d"],

Cell[TextData[{
 StyleBox["Part[lz, n]",
  FontWeight->"Bold"],
 " of a lazyList returns the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "6c5aee0c-8734-4191-ae59-aad0159570bd"],
 " element, whereas ",
 StyleBox["Part[lz, {n}]",
  FontWeight->"Bold"],
 " returns a lazyList containing the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f660f97f-81db-4235-83af-42a93ae10da3"],
 " element and the tail of the lazyList. This allows you to keep extracting \
further elements from the returned lazyList without losing progress. The \
lazyList does not keep track of position for efficiency reasons. This is up \
to the user."
}], "Text",ExpressionUUID->"e1df6d75-65c5-48fc-8e85-a9ebc6a57896"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", "4", "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[662]:=",ExpressionUUID->"62f4563c-892f-4239-8057-70dc5511ffaf"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[662]=",ExpressionUUID->"51425169-35db-498e-a3ac-213c87721194"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"4", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "4"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[663]=",ExpressionUUID->"ff232001-9855-4e60-83b1-ce66833b4b77"]
}, Open  ]],

Cell[TextData[{
 "The tail of the lazyList can be evaluated directly with ",
 StyleBox["Last",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Rest",
  FontWeight->"Bold"],
 " and returns a new lazyList. Both function identically:"
}], "Text",ExpressionUUID->"4c55ac1f-4035-43be-8969-6169e18c3552"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Last", "[", "%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Rest", "[", "%%", "]"}]}], "Input",
 CellLabel->
  "In[664]:=",ExpressionUUID->"c4c706ef-5ef3-466d-bcbf-29cde8da1f68"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[664]=",ExpressionUUID->"f01ad174-e65c-4fbd-9c14-3c1f29286d89"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[665]=",ExpressionUUID->"b15855a1-b45b-4320-9307-bf163ab221d1"]
}, Open  ]],

Cell["\<\
Multiple indices can be extracted in one go. In this case, the extracted \
elements will go in the first element of the returned lazyList while the tail \
will be left in the state of the highest visited index:\
\>", "Text",ExpressionUUID->"b80e232f-0514-4341-9156-760672a0e40a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", " ", "10", ",", " ", "5"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[666]:=",ExpressionUUID->"34dac2ad-2f9f-4764-b2c2-1e8b2142915d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "10", ",", "5"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[666]=",ExpressionUUID->"dd8bc22f-0ad4-4252-9d50-8948adef26d4"]
}, Open  ]],

Cell["\<\
Attempting to extract a part that doesn\[CloseCurlyQuote]t exist from a \
finite lazyList will yield a message and return $Failed:\
\>", "Text",ExpressionUUID->"3989a517-8b84-4212-9e72-43c697532a27"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lz", " ", "=", " ", 
   RowBox[{"lazyList", "[", 
    RowBox[{"Range", "[", "4", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", "5", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", "5", "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], "]"}], "]"}]}], "Input",
 CellLabel->
  "In[667]:=",ExpressionUUID->"32163113-6f5c-4fd9-8bf8-56f7acf65b56"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", RowBox[{RowBox[{\\\"(\\\", \
RowBox[{RowBox[{\\\"Quiet\\\", \\\"[\\\", RowBox[{RowBox[{\\\"Check\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \\\"partw\\\"}], \\\"MessageName\\\
\"], \\\"}\\\"}]}], \\\"]\\\"}], \\\"&\\\"}], \\\")\\\"}], \\\"[\\\", \
RowBox[{\\\"1\\\", \\\"+\\\", \\\"1\\\"}], \\\"]\\\"}]}], \\\"]\\\"}]\\) does \
not exist.\"",2,668,67,16511597886903173751,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[667]:=",ExpressionUUID->"87e2ab29-1b72-48de-8cb3-6d87dbc94b30"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->
  "Out[668]=",ExpressionUUID->"717b211c-685e-4fab-9fdd-af25f8790e6b"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", RowBox[{RowBox[{\\\"(\\\", \
RowBox[{RowBox[{\\\"Quiet\\\", \\\"[\\\", RowBox[{RowBox[{\\\"Check\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \\\"partw\\\"}], \\\"MessageName\\\
\"], \\\"}\\\"}]}], \\\"]\\\"}], \\\"&\\\"}], \\\")\\\"}], \\\"[\\\", \
RowBox[{\\\"1\\\", \\\"+\\\", \\\"1\\\"}], \\\"]\\\"}]}], \\\"]\\\"}]\\) does \
not exist.\"",2,669,68,16511597886903173751,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[667]:=",ExpressionUUID->"142f85e3-f8c1-453c-bc41-94bf97778509"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->
  "Out[669]=",ExpressionUUID->"08df0d93-d535-4f91-a56c-85100f1c20aa"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"4\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", RowBox[{RowBox[{\\\"(\\\", \
RowBox[{RowBox[{\\\"Quiet\\\", \\\"[\\\", RowBox[{RowBox[{\\\"Check\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \\\"partw\\\"}], \\\"MessageName\\\
\"], \\\"}\\\"}]}], \\\"]\\\"}], \\\"&\\\"}], \\\")\\\"}], \\\"[\\\", \
RowBox[{\\\"2\\\", \\\"+\\\", \\\"1\\\"}], \\\"]\\\"}]}], \\\"]\\\"}]\\) does \
not exist.\"",2,670,69,16511597886903173751,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[667]:=",ExpressionUUID->"c50b7003-94db-460f-8287-18dca147e15d"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[670]=",ExpressionUUID->"772b31ea-a1a5-439e-a8fa-5e0a72d26b4a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Take",
  FontWeight->"Bold"],
 " of lazyList returns lazyList. The first element is a list of the extracted \
elements. The tail is a lazyList at the point where take stopped. Note that \
there will be an overlap of 1 if you continue extracting elements form the \
returned lazyList (this is necessary to avoid unnecessary evaluations of \
elements)."
}], "Text",ExpressionUUID->"66aa0271-c1d7-444e-bd61-b1bc2b426edf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"First", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Last", "[", "list", "]"}], ",", "5"}], "]"}]}], "Input",
 CellLabel->
  "In[671]:=",ExpressionUUID->"0deb31ae-48a0-4c10-b1c5-60e740712aa2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[672]=",ExpressionUUID->"f26d4436-ba19-4a33-824a-325028a5f210"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"4", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "4"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[673]=",ExpressionUUID->"09dcd768-bbf7-4ad1-8896-dbf063c92b37"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "8"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"8", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "8"}], ",", "1"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[674]=",ExpressionUUID->"4f4c37f9-ee65-4006-a211-8292f8963740"]
}, Open  ]],

Cell["It is possible to specify a lower and upper index for Take:", \
"Text",ExpressionUUID->"8a0ddc07-8ca8-415e-9861-4912dc4f0514"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[721]:=",ExpressionUUID->"65961842-2921-4b5c-bbac-e02cfc7d40ba"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[721]=",ExpressionUUID->"2e935aba-cffa-4066-9c89-3be7e8bd9731"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5"}], "}"}], 
   ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[722]=",ExpressionUUID->"2ace25aa-2c91-4eb5-9d99-b1c09b275d4f"]
}, Open  ]],

Cell["\<\
Take will not issue a message if indices are requested beyond the length of \
the lazyList:\
\>", "Text",ExpressionUUID->"54f32590-2da2-49e5-b01e-8657a6c320f2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[727]:=",ExpressionUUID->"ab6d13e6-fbcc-488f-9ed1-1029e38d203f"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[727]=",ExpressionUUID->"7fda0255-9d8e-49df-a3ac-26add49ade39"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[728]=",ExpressionUUID->"a2290b08-b895-455e-b15d-11ac09757f7c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", "]"}]], "Output",
 CellLabel->
  "Out[729]=",ExpressionUUID->"38aa74e8-dc68-4b67-a4ea-e5420229685b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[730]=",ExpressionUUID->"144bd427-92f3-464c-b0c3-7fd3fa5b8984"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TakeWhile",
  FontWeight->"Bold"],
 " also works with lazyLists. Note that the tail of the returned lazyList \
contains the first element that didn\[CloseCurlyQuote]t pass the test:"
}], "Text",ExpressionUUID->"d9a560d3-261a-4f9c-bb6c-955eabdcb76c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TakeWhile", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"2", ",", "2"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}]], "Input",
 CellLabel->
  "In[678]:=",ExpressionUUID->"81c528c1-fbff-4d04-adb4-9a8335001936"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64"}], "}"}],
    ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"128", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", " ", "128"}], ",", "2"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[678]=",ExpressionUUID->"f09a1773-fdf8-4d39-a3e8-5b86c01935f8"]
}, Open  ]],

Cell["\<\
Normal lists can be converted into lazyLists by wrapping lazyList around \
them. The list is stored in a variable and is streamed element-by-element:\
\>", "Text",ExpressionUUID->"115e41b9-6140-442b-806c-1dc1bda77a77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyList", "[", 
     RowBox[{"Fibonacci", "[", 
      RowBox[{"Range", "[", "10", "]"}], "]"}], "]"}], ",", "5"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[679]:=",ExpressionUUID->"a71ae506-2558-4576-96a7-cd81d08eff10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[679]=",ExpressionUUID->"2f58d82c-b29d-432f-8152-788bddf90025"]
}, Open  ]],

Cell["\<\
It is also possible to turn a symbol that refers to a list into a lazyList by \
wrapping Hold around it:\
\>", "Text",ExpressionUUID->"49cab4cf-9bc5-40f6-b882-1a4b1090df44"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Fibonacci", "[", 
    RowBox[{"Range", "[", "10", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lazyList", "[", 
  RowBox[{"Hold", "[", "list", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyList", "[", 
     RowBox[{"Hold", "[", "list", "]"}], "]"}], ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[680]:=",ExpressionUUID->"ddb15fbb-3cb6-4cd4-933f-c1f27036e5d5"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Quiet", "[", 
       RowBox[{
        RowBox[{"Check", "[", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{
            RowBox[{
            "list", "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}], 
            ",", 
            RowBox[{"#0", "[", 
             RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], ",", 
          RowBox[{"lazyList", "[", "]"}], ",", 
          RowBox[{"{", 
           StyleBox[
            RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         StyleBox[
          RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], "]"}], 
      "&"}], ")"}], "[", 
    RowBox[{"1", "+", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[681]=",ExpressionUUID->"dde034fe-ff50-4a0f-bcd2-31aef26e9361"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[682]=",ExpressionUUID->"02932d66-7014-47bd-8fd4-03b85f5483c6"]
}, Open  ]],

Cell[TextData[{
 "lazyLists can be transposed with ",
 StyleBox["lazyTranspose",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"c76a374a-4a99-4e7e-89a6-b031331f12d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyTranspose", "[", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"lazyRange", "[", "]"}], ",", 
       RowBox[{"lazyConstantArray", "[", "0", "]"}]}], "}"}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "5"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[683]:=",ExpressionUUID->"01271068-9a2f-4f9f-bdc4-c0b467f0c7b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[683]=",ExpressionUUID->"0301564a-7d9f-456b-a7fc-aed8e9fff3a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lazy file streams", \
"Subsubsection",ExpressionUUID->"6d9500cf-eaaf-4ac9-97d8-236f0b90d0fa"],

Cell["lazyLists can be used with InputStreams. First make a file:", \
"Text",ExpressionUUID->"f082c183-c495-4435-9420-7573f759251c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"stmp", "=", 
   RowBox[{"OpenWrite", "[", "\"\<tmp\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "a", ",", "b", ",", "c"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "x"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Close", "[", "stmp", "]"}]}], "Input",
 CellLabel->"In[684]:=",
 CellID->28621,ExpressionUUID->"56e7c7ce-37ef-4877-9931-7dd9f3a12e91"],

Cell[BoxData["\<\"tmp\"\>"], "Output",
 CellLabel->"Out[690]=",ExpressionUUID->"a2a0b972-b52f-463a-8695-802be1a1bef0"]
}, Open  ]],

Cell["Open a reading stream and make a lazyList out of it:", \
"Text",ExpressionUUID->"a3290700-5172-4544-bd8e-a4ce7202ecbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", "3"}], "]"}]}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[691]:=",ExpressionUUID->"397a2c85-f736-4613-8c9b-d8a642960c89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"abc", ",", "x", ",", "\<\"Hello\"\>"}], "}"}]], "Output",
 CellLabel->"Out[691]=",ExpressionUUID->"8cc19036-7355-44db-be41-824e2ec43f47"]
}, Open  ]],

Cell["\<\
The stream will cut out automatically when it reaches the end of the file:\
\>", "Text",ExpressionUUID->"57ec74de-bf80-4038-9fb8-21b16a056923"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"TakeWhile", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", 
        RowBox[{"True", "&"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[692]:=",ExpressionUUID->"71fdd96b-ab00-400c-a4be-632c2ee366b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "abc", ",", "x", ",", "\<\"Hello\"\>", ",", "\<\"Hello\"\>", 
   ",", "\<\"Hello\"\>", ",", "EndOfFile"}], "}"}]], "Output",
 CellLabel->"Out[692]=",ExpressionUUID->"f87d4ff3-6a4c-4c58-9ccf-ad68c5f16fa9"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Plus",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Power",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Divide",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["Subtract ",
  FontWeight->"Bold"],
 "thread over lazyLists, though these functionalities are far less efficient \
than for ordinary lists and should probably be avoided if the same can be \
achieved with FoldList or Map"
}], "Text",ExpressionUUID->"d3f5e510-6511-42f7-bf7f-18d13a7c0060"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "+", 
     RowBox[{"lazyRange", "[", "2", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "*", " ", 
      RowBox[{"lazyRange", "[", "]"}]}], "+", 
     RowBox[{"3", " ", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "^", 
     RowBox[{"lazyRange", "[", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"Divide", "[", 
     RowBox[{"1", ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[693]:=",ExpressionUUID->"431c46dd-1989-4038-a8a6-287ac92d6e53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "7", ",", "9", ",", "11"}], "}"}]], "Output",
 CellLabel->
  "Out[693]=",ExpressionUUID->"458bc933-a585-4004-80cc-aa6862d6c6c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "13", ",", "21", ",", "29", ",", "37"}], "}"}]], "Output",
 CellLabel->
  "Out[694]=",ExpressionUUID->"723838fb-141e-42ca-97b2-85d994fcb890"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "27", ",", "256", ",", "3125"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[695]=",ExpressionUUID->"4ed55106-a1aa-4033-b6ff-fc8de99109e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", 
   FractionBox["1", "4"], ",", 
   FractionBox["1", "6"], ",", 
   FractionBox["1", "8"], ",", 
   FractionBox["1", "10"]}], "}"}]], "Output",
 CellLabel->"Out[696]=",ExpressionUUID->"6811af5d-8fdb-462b-81f5-5c6b294d6bea"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["lazyList operators", \
"Subsection",ExpressionUUID->"314c8f5e-1a86-4e86-9bd1-68842761416f"],

Cell[TextData[{
 StyleBox["Map",
  FontWeight->"Bold"],
 ", ",
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 ", ",
 StyleBox["FoldList",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Cases",
  FontWeight->"Bold"],
 ",",
 StyleBox[" Pick",
  FontWeight->"Bold"],
 ",",
 StyleBox[" ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " work with lazyLists and return lazyLists. There is also ",
 StyleBox["lazyMapThread",
  FontWeight->"Bold"],
 ", which functions similar to MapThread. All of these functions can be \
combined together to generate more complex lazyLists."
}], "Text",ExpressionUUID->"2db4b7f0-d54f-42c4-8598-19597a08299a"],

Cell[CellGroupData[{

Cell["Map", \
"Subsubsection",ExpressionUUID->"25ea5f2b-c1e7-4656-9115-8c0a9c24f192"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Map", "[", 
  RowBox[{"Sqrt", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[697]:=",ExpressionUUID->"db26052a-0c7d-4de0-99a3-0b0a708b07d2"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"Sqrt", "/@", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{"2", "+", "0"}], ",", "2"}], "]"}]}]}], "]"}]], "Output",
 CellLabel->
  "Out[697]=",ExpressionUUID->"510a912b-0876-4a44-a8db-327d32785521"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   SqrtBox["2"], ",", "2", ",", 
   SqrtBox["6"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["2"]}]}], "}"}]], "Output",
 CellLabel->"Out[698]=",ExpressionUUID->"19d0585a-e7b9-446f-87b5-c99f0dca90c3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fold", \
"Subsubsection",ExpressionUUID->"b293c8ba-17ea-40d2-9a5b-0d024f5a61e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FoldList", "[", 
  RowBox[{"Plus", ",", "x0", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"n", ",", "m"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[699]:=",ExpressionUUID->"88d3c946-e148-4f02-8892-b1be9959da90"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"x0", ",", 
   RowBox[{"FoldList", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"x0", "+", "8"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"3", "+", "8"}], ",", "3"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[699]=",ExpressionUUID->"90a307db-b272-4201-a1ca-4a0325f63908"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x0", ",", 
   RowBox[{"8", "+", "x0"}], ",", 
   RowBox[{"19", "+", "x0"}], ",", 
   RowBox[{"33", "+", "x0"}], ",", 
   RowBox[{"50", "+", "x0"}]}], "}"}]], "Output",
 CellLabel->"Out[700]=",ExpressionUUID->"80b99dff-68be-446a-a844-7fb1bdab7956"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cases", \
"Subsubsection",ExpressionUUID->"3c7f4e74-23d1-40b0-ba20-1134f3f1a203"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[701]:=",ExpressionUUID->"b0b0dea7-1808-4672-a86a-d9ce4333d960"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`case$102485", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{
       FractionBox["2", "3"], "+", "0"}], ",", 
      FractionBox["2", "3"]}], "]"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[701]=",ExpressionUUID->"16d47279-13b1-4e66-9507-2078cb588d98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "2", ",", "4", ",", "6", ",", "8"}], "}"}]], "Output",
 CellLabel->"Out[702]=",ExpressionUUID->"d737ad4d-c16a-4ee2-85b9-1bae002eff70"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pick", \
"Subsubsection",ExpressionUUID->"f3a06a45-4dfb-4c77-a330-74be0c8e9361"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Pick", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}], ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[703]:=",ExpressionUUID->"02767e8a-5bbd-4578-a783-6b1ca449f3b0"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`pick$102486", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", "+", "0"}], ",", "2"}], "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{
        FractionBox["2", "3"], "+", "0"}], ",", 
       FractionBox["2", "3"]}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[703]=",ExpressionUUID->"ea12bc13-a812-41b4-86ae-ce10dc557511"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "6", ",", "12", ",", "18", ",", "24"}], "}"}]], "Output",
 CellLabel->"Out[704]=",ExpressionUUID->"b476854d-a31e-4f80-bcec-6dc77214a57c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Select", \
"Subsubsection",ExpressionUUID->"67410976-9bef-4063-994a-da7ffc8607aa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "OddQ"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[705]:=",ExpressionUUID->"f7cc65d1-b623-4858-860e-fb8bda6906cf"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", "OddQ"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[705]=",ExpressionUUID->"a4f0f5de-9a14-4644-809c-9ff8fccecc36"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[706]=",ExpressionUUID->"c2aa37a0-a358-4445-a043-e98d1aea7d0a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapIndexed", \
"Subsubsection",ExpressionUUID->"165f8426-7fdc-4dd2-879f-7c449ccd6ae4"],

Cell[TextData[{
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 " allows you to map a function of 2 arguments over a lazyList. The 2nd \
argument is an integer that keeps track of the position in the list. Note \
that this is slightly different from the way MapIndexed works normally, which \
supplies a list containing the index to the second argument. "
}], "Text",ExpressionUUID->"46c8a02f-7fcf-4bfc-ab29-1b9988a542db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
    "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[707]:=",ExpressionUUID->"ab76f983-28b6-43cf-9633-09f130a5a988"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[707]=",ExpressionUUID->"43cff3ba-b471-46e2-a972-1062e94c7195"]
}, Open  ]],

Cell["\<\
MapIndexed has a third argument to specify the starting position. This is \
useful when passing a lazyList which has already been partially evaluated.\
\>", "Text",ExpressionUUID->"a1d52835-fdc6-4c94-8c49-8996fd82e507"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", "]"}], ",", "20"}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[708]:=",ExpressionUUID->"fc210aed-ccdd-4241-b891-65b6433f88ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "24"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[708]=",ExpressionUUID->"f22dafe7-80eb-42d6-bc37-5ee31b0a82e8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["lazyMapThread", \
"Subsubsection",ExpressionUUID->"6527aab7-0b41-4f41-8386-669ecaa71c8b"],

Cell[TextData[{
 StyleBox["lazyMapThread",
  FontWeight->"Bold"],
 " is functionally similar to MapThread, except all arguments are fed as a \
List into the first slot of the mapped function:"
}], "Text",ExpressionUUID->"edc0cb50-690c-4cee-b084-17a3472acd11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"lazyRange", "[", 
         RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[709]:=",ExpressionUUID->"2f643a7b-e0c1-44f8-bfc1-340a161a0d8a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "6"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "10"}], "}"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[709]=",ExpressionUUID->"5a9b504d-e2d6-471e-9994-48bf46a9695d"]
}, Open  ]],

Cell["Compare with regular MapThread:", \
"Text",ExpressionUUID->"c06c056b-c716-4d08-82f9-cdd01019726f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "5", "]"}], ",", 
     RowBox[{"2", 
      RowBox[{"Range", "[", "5", "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[710]:=",ExpressionUUID->"3bbfeee5-cbb7-4e4d-8186-0d37f0b22777"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "4"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "6"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "8"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "10"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[710]=",ExpressionUUID->"43eccfe6-c1fd-40bf-99c3-0bee9380a055"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Caveats", \
"Subsection",ExpressionUUID->"913456ae-86bc-474d-90bb-1fe719afec8e"],

Cell["\<\
When defining your own lazyLists, make sure the last part of the list does \
not evaluate to itself. Take etc. will not work correctly on such lists and \
stop iterating prematurely:\
\>", "Text",ExpressionUUID->"232911ec-716c-44a2-a324-124b95f3af23"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"badExample", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", "]"}]}], "]"}], "]"}], "[", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"badExample", "===", 
  RowBox[{"Last", "[", "badExample", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"badExample", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->
  "In[711]:=",ExpressionUUID->"16b8e012-7427-4406-b801-d4e7e34f299e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", "]"}]}], "]"}], "&"}], ")"}], "[", "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[711]=",ExpressionUUID->"41dd2d7e-41ad-4621-aece-40e07ead7923"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[712]=",ExpressionUUID->"a3d41afd-ad15-488a-a99d-9283cef1ffea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[713]=",ExpressionUUID->"32b5e5a8-de57-4db3-b72f-ead490d2aac9"]
}, Open  ]],

Cell["\<\
Instead, you can add an iterator that increases with each evaluation. This \
iterator can also be used to keep track of the position in the lazy list:\
\>", "Text",ExpressionUUID->"24b81520-5eb3-4541-b793-4c68766f4c01"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"example", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", 
       RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "]"}], "[", "1", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"example", "===", 
  RowBox[{"Last", "[", "example", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"example", ",", "20"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"position", "=", 
  RowBox[{"Replace", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Last", "@", "%"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"Function", "[", "__", "]"}], "[", "i_", "]"}]}], "]"}], 
      "\[RuleDelayed]", "i"}], "\[IndentingNewLine]", "}"}]}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[714]:=",ExpressionUUID->"44069107-bcb5-4d00-85bc-c9773bf4979b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{"1", "+", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[714]=",ExpressionUUID->"c1c0aebf-c719-4517-913e-fe974c404f2c"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[715]=",ExpressionUUID->"a4706eac-3704-4394-b365-20fa51541e62"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"1", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
      RowBox[{"20", "+", "1"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[716]=",ExpressionUUID->"f53b221f-ae39-413d-ae99-e13478240ea0"],

Cell[BoxData["21"], "Output",
 CellLabel->"Out[717]=",ExpressionUUID->"11b71aef-8492-44ec-8e06-9173c87bf1d4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{983, 839},
WindowMargins->{{Automatic, 377}, {Automatic, 40}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]

